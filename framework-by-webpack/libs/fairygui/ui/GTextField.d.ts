import { InputTextField } from "../core/text/InputTextField";
import { TextField } from "../core/text/TextField";
import { TextFormat } from "../core/text/TextFormat";
import { AlignType, VertAlignType } from "./FieldTypes";
import { GObject } from "./GObject";
import { ByteBuffer } from "../utils/ByteBuffer";
import { RichTextField } from "../core/text/RichTextField";
export declare type TextTemplate = {
    [index: string]: string;
};
export declare class GTextField extends GObject {
    protected _textField: TextField | RichTextField | InputTextField;
    protected _text: string;
    protected _ubbEnabled: boolean;
    protected _updatingSize: boolean;
    protected _template: TextTemplate;
    constructor();
    protected createDisplayObject(): void;
    get text(): string;
    set text(value: string);
    protected setText(): void;
    get textTemplate(): TextTemplate;
    set textTemplate(value: TextTemplate);
    setVar(name: string, value: string): GTextField;
    flushVars(): void;
    get textFormat(): TextFormat;
    applyFormat(): void;
    get align(): AlignType;
    set align(value: AlignType);
    get verticalAlign(): VertAlignType;
    set verticalAlign(value: VertAlignType);
    get singleLine(): boolean;
    set singleLine(value: boolean);
    set ubbEnabled(value: boolean);
    get ubbEnabled(): boolean;
    get autoSize(): number;
    set autoSize(value: number);
    get textWidth(): number;
    get textHeight(): number;
    get color(): number;
    set color(value: number);
    getProp(index: number): any;
    setProp(index: number, value: any): void;
    private updateSize;
    protected handleSizeChanged(): void;
    setup_beforeAdd(buffer: ByteBuffer, beginPos: number): void;
    setup_afterAdd(buffer: ByteBuffer, beginPos: number): void;
    protected parseTemplate(template: string): string;
}
