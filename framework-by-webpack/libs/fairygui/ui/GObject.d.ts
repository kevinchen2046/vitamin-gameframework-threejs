import { Object3D, Vector2, Blending } from "three";
import { DisplayObject } from "../core/DisplayObject";
import { EventType } from "../event/Event";
import { GearBase } from "../gears/GearBase";
import { ByteBuffer } from "../utils/ByteBuffer";
import { Rect } from "../utils/Rect";
import { Controller } from "./Controller";
import { GComponent } from "./GComponent";
import { GGroup } from "./GGroup";
import { GTreeNode } from "./GTreeNode";
import { PackageItem } from "./PackageItem";
import { Relations } from "./Relations";
export declare class GObject {
    data?: any;
    packageItem?: PackageItem;
    static draggingObject: GObject;
    private _x;
    private _y;
    private _z;
    private _alpha;
    private _visible;
    private _touchable;
    private _grayed;
    private _draggable;
    private _scaleX;
    private _scaleY;
    private _skewX;
    private _skewY;
    private _pivotX;
    private _pivotY;
    private _pivotAsAnchor;
    private _sortingOrder;
    private _internalVisible;
    private _handlingController?;
    private _tooltips;
    private _relations;
    private _group;
    private _gears;
    private _dragBounds;
    protected _displayObject: DisplayObject;
    minWidth: number;
    minHeight: number;
    maxWidth: number;
    maxHeight: number;
    sourceWidth: number;
    sourceHeight: number;
    initWidth: number;
    initHeight: number;
    _parent: GComponent;
    _width: number;
    _height: number;
    _rawWidth: number;
    _rawHeight: number;
    _id: string;
    _name: string;
    _underConstruct: boolean;
    _gearLocked: boolean;
    _sizePercentInGroup: number;
    _treeNode?: GTreeNode;
    constructor();
    get id(): string;
    get name(): string;
    set name(value: string);
    get x(): number;
    set x(value: number);
    get y(): number;
    set y(value: number);
    get z(): number;
    set z(value: number);
    setPosition(xv: number, yv: number, zv?: number): void;
    get xMin(): number;
    set xMin(value: number);
    get yMin(): number;
    set yMin(value: number);
    center(restraint?: boolean): void;
    get width(): number;
    set width(value: number);
    get height(): number;
    set height(value: number);
    setSize(wv: number, hv: number, ignorePivot?: boolean): void;
    protected setSizeDirectly(wv: number, hv: number): void;
    makeFullScreen(): void;
    get actualWidth(): number;
    get actualHeight(): number;
    get scaleX(): number;
    set scaleX(value: number);
    get scaleY(): number;
    set scaleY(value: number);
    setScale(sx: number, sy: number): void;
    get skewX(): number;
    set skewX(value: number);
    get skewY(): number;
    set skewY(value: number);
    setSkew(sx: number, sy: number): void;
    get pivotX(): number;
    set pivotX(value: number);
    get pivotY(): number;
    set pivotY(value: number);
    setPivot(xv: number, yv: number, asAnchor?: boolean): void;
    get pivotAsAnchor(): boolean;
    get touchable(): boolean;
    set touchable(value: boolean);
    get grayed(): boolean;
    set grayed(value: boolean);
    get enabled(): boolean;
    set enabled(value: boolean);
    get rotation(): number;
    set rotation(value: number);
    get rotationX(): number;
    set rotationX(value: number);
    get rotationY(): number;
    set rotationY(value: number);
    get alpha(): number;
    set alpha(value: number);
    get visible(): boolean;
    set visible(value: boolean);
    get internalVisible(): boolean;
    get internalVisible2(): boolean;
    get internalVisible3(): boolean;
    get sortingOrder(): number;
    set sortingOrder(value: number);
    get tooltips(): string;
    set tooltips(value: string);
    private __rollOver;
    private __doShowTooltips;
    private __rollOut;
    get blendMode(): Blending;
    set blendMode(value: Blending);
    get onStage(): boolean;
    get resourceURL(): string;
    set group(value: GGroup);
    get group(): GGroup;
    getGear(index: number): GearBase;
    protected updateGear(index: number): void;
    checkGearController(index: number, c: Controller): boolean;
    updateGearFromRelations(index: number, dx: number, dy: number): void;
    addDisplayLock(): number;
    releaseDisplayLock(token: number): void;
    private checkGearDisplay;
    get relations(): Relations;
    addRelation(target: GObject, relationType: number, usePercent?: boolean): void;
    removeRelation(target: GObject, relationType: number): void;
    get displayObject(): DisplayObject;
    get obj3D(): Object3D;
    get parent(): GComponent;
    set parent(val: GComponent);
    removeFromParent(): void;
    get asCom(): GComponent;
    get text(): string;
    set text(value: string);
    get icon(): string;
    set icon(value: string);
    get treeNode(): GTreeNode;
    get isDisposed(): boolean;
    dispose(): void;
    on(type: EventType, callback: Function, target?: any, capture?: boolean): void;
    on(type: string, callback: Function, target?: any, capture?: boolean): void;
    off(type: EventType, callback: Function, target?: any, capture?: boolean): void;
    off(type: string, callback: Function, target?: any, capture?: boolean): void;
    offAll(type?: EventType): void;
    offAll(type?: string): void;
    hasListener(type: EventType, callback?: Function, target?: any, capture?: boolean): boolean;
    hasListener(type: string, callback?: Function, target?: any, capture?: boolean): boolean;
    dispatchEvent(type: EventType, data?: any): boolean;
    dispatchEvent(type: string, data?: any): boolean;
    onClick(listener: Function, target?: any): void;
    offClick(listener: Function, target?: any): void;
    hasClickListener(): boolean;
    get draggable(): boolean;
    set draggable(value: boolean);
    get dragBounds(): Rect;
    set dragBounds(value: Rect);
    startDrag(touchId?: number): void;
    stopDrag(): void;
    get dragging(): boolean;
    localToGlobal(ax?: number, ay?: number, result?: Vector2): Vector2;
    globalToLocal(ax?: number, ay?: number, result?: Vector2): Vector2;
    localToRoot(ax: number, ay: number, result?: Vector2): Vector2;
    rootToLocal(ax: number, ay: number, result?: Vector2): Vector2;
    localToGlobalRect(ax: number, ay: number, aWidth: number, aHeight: number, result?: Rect): Rect;
    globalToLocalRect(ax: number, ay: number, aWidth: number, aHeight: number, result?: Rect): Rect;
    handleControllerChanged(c: Controller): void;
    protected createDisplayObject(): void;
    protected handlePositionChanged(): void;
    protected handleSizeChanged(): void;
    protected handleScaleChanged(): void;
    protected handleGrayedChanged(): void;
    protected handleAlphaChanged(): void;
    handleVisibleChanged(): void;
    getProp(index: number): any;
    setProp(index: number, value: any): void;
    constructFromResource(): void;
    setup_beforeAdd(buffer: ByteBuffer, beginPos: number): void;
    setup_afterAdd(buffer: ByteBuffer, beginPos: number): void;
    private _dragStartPos;
    private _dragTesting;
    private initDrag;
    private dragBegin;
    private dragEnd;
    private __touchBegin;
    private __touchMove;
    private __touchEnd;
    static cast(obj: any): GObject;
}
export interface IGRoot {
    inst: any;
    findFor(obj: GObject): any;
}
export declare var Decls: {
    GRoot?: IGRoot;
};
export declare var gInstanceCounter: number;
export declare var constructingDepth: {
    n: number;
};
