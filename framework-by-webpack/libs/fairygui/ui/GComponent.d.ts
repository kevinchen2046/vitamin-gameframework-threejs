import { Vector2 } from "three";
import { DisplayObject } from "../core/DisplayObject";
import { ByteBuffer } from "../utils/ByteBuffer";
import { Controller } from "./Controller";
import { GGroup } from "./GGroup";
import { GObject } from "./GObject";
import { Margin } from "./Margin";
import { ScrollPane } from "./ScrollPane";
import { Transition } from "./Transition";
export declare class GComponent extends GObject {
    private _sortingChildCount;
    private _applyingController?;
    protected _margin: Margin;
    protected _trackBounds: boolean;
    protected _boundsChanged: boolean;
    protected _childrenRenderOrder: number;
    protected _apexIndex: number;
    _buildingDisplayList: boolean;
    _children: GObject[];
    _controllers: Controller[];
    _transitions: Transition[];
    _container: DisplayObject;
    _scrollPane: ScrollPane;
    _alignOffset: Vector2;
    constructor();
    protected createDisplayObject(): void;
    dispose(): void;
    get displayListContainer(): DisplayObject;
    addChild(child: GObject): GObject;
    addChildAt(child: GObject, index: number): GObject;
    private getInsertPosForSortingChild;
    removeChild(child: GObject, dispose?: boolean): GObject;
    removeChildAt(index: number, dispose?: boolean): GObject;
    removeChildren(beginIndex?: number, endIndex?: number, dispose?: boolean): void;
    getChildAt(index: number): GObject;
    getChild(name: string): GObject;
    getChildByPath(path: string): GObject;
    getVisibleChild(name: string): GObject;
    getChildInGroup(name: string, group: GGroup): GObject;
    getChildById(id: string): GObject;
    getChildIndex(child: GObject): number;
    setChildIndex(child: GObject, index: number): void;
    setChildIndexBefore(child: GObject, index: number): number;
    private _setChildIndex;
    swapChildren(child1: GObject, child2: GObject): void;
    swapChildrenAt(index1: number, index2: number): void;
    get numChildren(): number;
    isAncestorOf(child: GObject): boolean;
    addController(controller: Controller): void;
    getControllerAt(index: number): Controller;
    getController(name: string): Controller;
    removeController(c: Controller): void;
    get controllers(): Controller[];
    childStateChanged(child: GObject): void;
    private buildNativeDisplayList;
    applyController(c: Controller): void;
    applyAllControllers(): void;
    adjustRadioGroupDepth(obj: GObject, c: Controller): void;
    getTransitionAt(index: number): Transition;
    getTransition(transName: string): Transition;
    isChildInView(child: GObject): boolean;
    getFirstChildInView(): number;
    get scrollPane(): ScrollPane;
    get opaque(): boolean;
    set opaque(value: boolean);
    get margin(): Margin;
    set margin(value: Margin);
    get childrenRenderOrder(): number;
    set childrenRenderOrder(value: number);
    get apexIndex(): number;
    set apexIndex(value: number);
    get baseUserData(): string;
    protected updateMask(): void;
    protected setupScroll(buffer: ByteBuffer): void;
    protected setupOverflow(overflow: number): void;
    protected handleSizeChanged(): void;
    protected handleGrayedChanged(): void;
    handleControllerChanged(c: Controller): void;
    setBoundsChangedFlag(): void;
    private __render;
    ensureBoundsCorrect(): void;
    protected updateBounds(): void;
    setBounds(ax: number, ay: number, aw: number, ah: number): void;
    get viewWidth(): number;
    set viewWidth(value: number);
    get viewHeight(): number;
    set viewHeight(value: number);
    getSnappingPosition(xValue: number, yValue: number, resultPoint?: Vector2): Vector2;
    /**
     * dir正数表示右移或者下移，负数表示左移或者上移
     */
    getSnappingPositionWithDir(xValue: number, yValue: number, xDir: number, yDir: number, resultPoint?: Vector2): Vector2;
    childSortingOrderChanged(child: GObject, oldValue: number, newValue: number): void;
    constructFromResource(): void;
    constructFromResource2(objectPool: GObject[], poolIndex: number): void;
    protected constructExtension(buffer: ByteBuffer): void;
    protected onConstruct(): void;
    setup_afterAdd(buffer: ByteBuffer, beginPos: number): void;
}
