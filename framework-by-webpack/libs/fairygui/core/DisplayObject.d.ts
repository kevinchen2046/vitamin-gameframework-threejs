import { Blending, Camera, Euler, Object3D, Plane, Scene, Vector2, Vector3 } from "three";
import { EventDispatcher } from "../event/EventDispatcher";
import { Rect } from "../utils/Rect";
import { IHitTest } from "./hittest/IHitTest";
import { NGraphics } from "./NGraphics";
import { HitTestContext } from "./Stage";
export declare class DisplayObject extends EventDispatcher {
    opaque?: boolean;
    hitArea?: IHitTest;
    mask?: DisplayObject;
    reversedMask?: boolean;
    camera?: Camera;
    protected _contentRect: Rect;
    protected _alpha: number;
    protected _touchable: boolean;
    protected _touchDisabled?: boolean;
    protected _pos: Vector3;
    protected _rot: Euler;
    protected _pivot: Vector2;
    protected _pivotOffset: Vector3;
    protected _clipRect?: Rect;
    protected _clipPlanes?: Array<Plane>;
    protected _obj3D: Object3D;
    protected _graphics?: NGraphics;
    private _matrixDirty;
    constructor();
    get obj3D(): Object3D;
    get name(): string;
    set name(value: string);
    get x(): number;
    set x(value: number);
    get y(): number;
    set y(value: number);
    get z(): number;
    set z(value: number);
    setPosition(x: number, y: number, z?: number, isPivot?: boolean): void;
    get width(): number;
    set width(value: number);
    get height(): number;
    set height(value: number);
    setSize(wv: number, hv: number): void;
    protected ensureSizeCorrect(): void;
    protected onSizeChanged(): void;
    get pivotX(): number;
    set pivotX(value: number);
    get pivotY(): number;
    set pivotY(value: number);
    setPivot(xv: number, yv: number): void;
    private updatePivotOffset;
    private applyPivot;
    get scaleX(): number;
    set scaleX(value: number);
    get scaleY(): number;
    set scaleY(value: number);
    setScale(xv: number, yv: number): void;
    get rotationX(): number;
    set rotationX(value: number);
    get rotationY(): number;
    set rotationY(value: number);
    get rotation(): number;
    set rotation(value: number);
    get parent(): Object3D;
    get stage(): Scene;
    get graphics(): NGraphics;
    get alpha(): number;
    set alpha(value: number);
    get touchable(): boolean;
    set touchable(value: boolean);
    get visible(): boolean;
    set visible(value: boolean);
    get color(): number;
    set color(value: number);
    get blendMode(): Blending;
    set blendMode(value: Blending);
    setLayer(layer: number): void;
    validateMatrix(): void;
    _getRenderCamera(): Camera;
    worldToLocal(pt: Vector3, direction?: Vector3, validate?: boolean): Vector3;
    localToWorld(pt: Vector3, validate?: boolean): Vector3;
    globalToLocal(x: number, y: number, result?: Vector2): Vector2;
    localToGlobal(x: number, y: number, result?: Vector2): Vector2;
    getBounds(targetSpace: Object3D, result?: Rect): Rect;
    transformPoint(x: number, y: number, targetSpace?: Object3D, result?: Vector2): Vector2;
    transformRect(rect: Rect, targetSpace?: Object3D, result?: Rect): Rect;
    private transformRectPoint;
    addChild(child: DisplayObject): void;
    addChildAt(child: DisplayObject, index: number): void;
    removeChild(child: DisplayObject): void;
    removeChildAt(index: number): void;
    setChildIndex(child: DisplayObject, index: number): void;
    getIndex(child: DisplayObject): number;
    get numChildren(): number;
    get clipRect(): Rect;
    set clipRect(value: Rect);
    update(clipPlanes: any, alpha: number): void;
    protected hitTest(context: HitTestContext): DisplayObject;
    dispose(): void;
}
export declare function traverseUpdate(p: Object3D, clippingPlanes: any, alpha: number): void;
export declare function traverseHitTest(p: Object3D, context: HitTestContext, mask?: any): DisplayObject;
